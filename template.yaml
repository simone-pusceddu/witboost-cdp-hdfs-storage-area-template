apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: hdfs-storage-template.1
  title: HDFS Storage
  description: Creates a HDFS Storage Area by creating a folder hierarchy on an HDFS instance
  mesh:
    icon: https://upload.wikimedia.org/wikipedia/commons/thumb/0/0e/Hadoop_logo.svg/320px-Hadoop_logo.svg.png
  tags:
    - cdp-private
    - hdfs
    - storage
spec:
  owner: agilelab
  type: storage
  generates: componenttype:default/storage
  parameters:
    - $yaml: ./header.yaml
    - title: Component metadata
      required:
        - name
        - domain
        - dataproduct
        - description
      properties:
        name:
          title: Name
          type: string
          description: Required name used for display purposes
          ui:field: EntityNamePicker
          default: HDFS Storage
          ui:options:
            allowArbitraryValues: true
        description:
          title: Description
          type: string
          description: Help others understand what this component is for
        domain:
          title: Domain
          type: string
          description: Domain of the Data Product this component belongs to
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            allowedKinds: 
              - Domain
        dataproduct:
          title: Data Product
          type: string
          description: Data Product this Workload belongs to
          ui:field: EntityPicker
          ui:filter:
            - fieldName: domain
              entityPath: spec.domain
          ui:options:
            allowArbitraryValues: false
            allowedKinds: 
              - System
        identifier:
          title: Identifier
          type: string
          description: A unique identifier for the entity inside the domain. It will not be editable after creation and is expected to be a string that is sequences of [a-zA-Z] separated by any of [-_]. An example could be 'finance-customer'
          ui:field: ComponentIdentifierPicker
          ui:options:
            allowArbitraryValues: false
        developmentGroup:
          title: DevelopmentGroup
          type: string
          description: Data Product development group
          ui:field: EntitySelectionPicker
          ui:fieldName: dataproduct
          ui:property: spec.owner
          ui:options:
            allowArbitraryValues: false
        dependsOn:
          title: Depends On
          type: array
          description: A component could depend on other components in the same Data Product. This information will be used to deploy the components in such an order that their dependencies already exist.
          default: []
          items:
            type: string
            ui:field: EntityRelationsPicker
            ui:fieldName: dataproduct
            relation: hasPart
        domainName:
          type: string
          ui:field: EntitySelectionPicker
          ui:fieldName: domain
          ui:property: spec.mesh.name
          ui:options:
            allowArbitraryValues: false
          ui:widget: hidden
        dataproductName:
          type: string
          ui:field: EntitySelectionPicker
          ui:fieldName: dataproduct
          ui:property: spec.mesh.name
          ui:options:
            allowArbitraryValues: false
          ui:widget: hidden

    - title: Provide HDFS deployment information
      required:
        - prefixPath
      description: |-
        This template will create a folder hierarchy based on a prefix path and a hierarchy based on the data product and component information. 
        
        Checkout the documentation for more information
      properties:
        prefixPath:
          title: Prefix Path
          type: string
          description: Prefix path of the location in HDFS. The folder hierarchy will be created under this prefix path. Must start and end with '/'
          default: "/"
          validation:
            errorMessage: Invalid prefixPath. Please enter a valid prefixPath starting with a '/' and containing alphanumeric characters separated by '/'. Ensure that it ends with a '/' as well.
            regularExpression: ^\/(?:[\w-]+\/)*$
          ui:field: RegexPicker

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        targetPath: '.'
        values:
          name: '${{ parameters.name }}'
          domainName: '${{ parameters.domainName }}'
          dataproductName: '${{ parameters.dataproductName }}'
          description: '${{ parameters.description }}'
          domain: '${{ parameters.domain }}'
          dataproduct: '${{ parameters.dataproduct }}'
          identifier: '${{ parameters.identifier }}'
          developmentGroup: '${{ parameters.developmentGroup }}'
          dependsOn: '${{ parameters.dependsOn }}'
          prefixPath: '${{ parameters.prefixPath }}'
          useCaseTemplateId: urn:dmb:utm:cdp-private-hdfs-storage-template:0.0.0
          infrastructureTemplateId: urn:dmb:itm:cdp-private-hdfs-provisioner:0
          repoUrl: &destination 'gitlab.com?owner=simone.pusceddu&repo=${{ parameters.name.split(" ") | join("") | lower }}'
          owner: 'AgileDMBSandbox${{orgname}}%2Fmesh.repository/${{ parameters.domain | replace(r/domain:| |-/, "") }}/${{ parameters.dataproduct.split(".")[1] | replace(r/ |-/g, "") }}'
          repo: '${{ parameters.name.split(" ") | join("") | lower }}'
          displayName: '${{ parameters.displayName }}'
          artifact_id: '${{ parameters.name }}'
          useCaseTemplateVersion: 0.0.0

    - id: publish
      name: Publish
      action: witboostMeshComponent:publish:gitlab
      input:
        allowedHosts: ['gitlab.com']
        description: 'This is ${{ parameters.name }}'
        repoUrl: *destination
        rootDirectory: '.'
        dataproduct: '${{ parameters.dataproduct }}'

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: '${{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: '${{ steps.publish.output.remoteUrl }}'
      - title: Open in catalog
        icon: catalog
        entityRef: '${{ steps.register.output.entityRef }}'
